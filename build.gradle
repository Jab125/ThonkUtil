import net.fabricmc.loom.task.RemapJarTask
import org.apache.commons.codec.digest.DigestUtils
import org.kohsuke.github.GHReleaseBuilder

buildscript {
    dependencies {
        classpath 'org.kohsuke:github-api:1.135'
        classpath 'commons-codec:commons-codec:1.6'
    }
}
plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "org.ajoberstar.grgit" version "3.1.0"
    id "com.diffplug.spotless" version "6.5.1"
}
def ENV = System.getenv()
version = project.properties["thonkutil-version"] + "+" + (ENV.GITHUB_RUN_NUMBER ? "" : "local-") + getBranch();

def moduleDependencies(project, List<String> depNames) {
    def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }
    project.dependencies {
        deps.each {
            api it
        }
    }
}

def testDependencies(project, List<String> depNames) {
    def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }
    def clientOutputs = depNames.iterator().collect { findProject(":$it").sourceSets.client.output }

    project.dependencies {
        deps.each {
            testmodImplementation it
        }

        clientOutputs.each {
            testmodImplementation it
        }
    }
}

def getBranch() {
    def ENV = System.getenv()
    if (ENV.GITHUB_REF) {
        def branch = ENV.GITHUB_REF
        return branch.substring(branch.lastIndexOf("/") + 1)
    }

    if (grgit == null) {
        return "unknown"
    }

    def branch = grgit.branch.current().name
    return branch.substring(branch.lastIndexOf("/") + 1)
}


import org.kohsuke.github.GitHub;

def getSubprojectVersion(project) {
    // Get the version from the gradle.properties file
    def version = project.properties["${project.name}-version"]

    if (!version) {
        throw new NullPointerException("Could not find version for " + project.name)
    }

    if (grgit == null) {
        return version + "+nogit"
    }

    def latestCommits = grgit.log(paths: [project.name], maxCommits: 1)

    if (latestCommits.isEmpty()) {
        return version + "+uncommited"
    }

    return version + "+" + latestCommits.get(0).id.substring(0, 8) + DigestUtils.sha256Hex(project.rootProject.minecraft_version).substring(0, 2)
}

def getAddon(project) {
    // Get the version from the gradle.properties file


    if (grgit == null) {
        return "+nogit"
    }

    def latestCommits = grgit.log(paths: [project.name], maxCommits: 1)

    if (latestCommits.isEmpty()) {
        return "+uncommited"
    }

    return "+" + latestCommits.get(0).id.substring(0, 8) + DigestUtils.sha256Hex(project.rootProject.minecraft_version).substring(0, 2)
}


allprojects {
    apply plugin: 'fabric-loom'
    apply plugin: "com.diffplug.spotless"

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    archivesBaseName = project.archives_base_name
    //version = project.mod_version
    group = project.maven_group

    repositories {
        maven { url "https://maven.terraformersmc.com/releases" }
        maven {
            name = "Ladysnake Libs"
            url = "https://ladysnake.jfrog.io/artifactory/mods"
        }
        maven { url 'https://jitpack.io' }
        maven {
            url "https://cursemaven.com"
        }
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }


    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath

            //   compileClasspath += client.compileClasspath
            //        runtimeClasspath += client.runtimeClasspath
        }
    }
    loom {
        shareRemapCaches = true

        runs {
            testmodClient {
                client()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Client"
                source sourceSets.testmod
            }
            testmodServer {
                server()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Server"
                source sourceSets.testmod
            }
        }
    }

    allprojects.each { p ->
        if (project.name == "deprecated") return

        loom.mods.register(p.name) {
            sourceSet p.sourceSets.main
        //    sourceSet p.sourceSets.client
        }

        loom.mods.register(p.name + "-testmod") {
            sourceSet p.sourceSets.testmod
        }
    }

    task testmodJar(type: Jar) {
        from sourceSets.testmod.output
        destinationDirectory = new File(project.buildDir, "devlibs")
        archiveClassifier = "testmod"
    }

    task remapTestmodJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: testmodJar) {
        input = testmodJar.archiveFile
        archiveClassifier = "testmod"
        addNestedDependencies = false
    }
    build.dependsOn remapTestmodJar


    dependencies {
        // To change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

        modImplementation "com.terraformersmc:modmenu:4.0.6", {
            exclude module: "fabric-api"
        }

        modRuntimeOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-api:5.0.0-beta.1"

      //  modRuntimeOnly "maven.modrinth:wavey-capes:1.2.0-fabric-1.18"

        modCompileOnly "dev.emi:trinkets:3.4.0"
        //modCompileOnly "curse.maven:waveycapes-521594:3695381"
        // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
        // You may need to force-disable transitiveness on them.
    }

    afterEvaluate {
        artifacts {
            dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
        }
    }

    repositories {
        mavenLocal()
    }

    configurations {
        dev
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        it.options.encoding = "UTF-8"

        // Minecraft 1.17 (21w19a) upwards uses Java 17.
        it.options.release = 17
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }
    jar {
        from("LICENSE") {
            rename { "${it}_${project.archivesBaseName}" }
        }
    }

    spotless {
        java {
            licenseHeaderFile(rootProject.file("HEADER"))
        }
    }

    task remapMavenJar(type: RemapJarTask, dependsOn: remapJar) {
        input = jar.archiveFile
        archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
        addNestedDependencies = false
    }
    build.dependsOn remapMavenJar

// configure the maven publication
    publishing {
        publications {
            mavenJava(MavenPublication) {
                // add all the jars that should be included when publishing to maven
                artifact(remapJar) {
                    builtBy remapJar
                }
                artifact(sourcesJar) {
                    builtBy remapSourcesJar
                }
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}

subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }


subprojects {
    dependencies {
        testmodImplementation sourceSets.main.output
    }
    runClient {
        enabled = false
    }
    runServer {
        enabled = false
    }
}

sourceSets {
    testmod
}

def dontInclude = [
        "thonkutil-additional-capes-v1"
]
def dontUse = [
        "thonkutil-unittests"
]

remapTestmodJar {
    def testModJarTasks = []

    subprojects {
        if (it.name == "deprecated" || !it.file("src/testmod").exists()) return

        testModJarTasks += it.tasks.remapTestmodJar
    }

    nestedJars.setFrom(testModJarTasks)
    addNestedDependencies = true
}

dependencies {
    afterEvaluate {
        subprojects.each {
            if (!(it.name in dontUse)) {
                api project(path: ":${it.name}", configuration: "namedElements")

                if (!(it.name in dontInclude)) {
                    include project("${it.name}:")
                }
            }

            testmodImplementation project("${it.name}:").sourceSets.testmod.output
        }
    }
}

tasks.withType(Jar).configureEach {
    manifest {
        attributes 'Implementation-Title': 'ThonkUtil',
                'Implementation-Version': project.version,
                'Main-Class': 'com.jab125.thonkutil.Main'
    }
}

curseforge {
    if (ENV.CURSEFORGE_API_KEY) {
        apiKey = ENV.CURSEFORGE_API_KEY
        if (project.prerelease == "pre-alpha") return
    }

    project {
        id = "536648"
        changelog = ENV.CHANGELOG ?: "No changelog provided"
        releaseType = project.prerelease == "true" ? "beta" : project.prerelease == "alpha" ? "alpha" : "release"
        addGameVersion "1.19"
        addGameVersion "1.19-Snapshot"
        addGameVersion "Fabric"
        addGameVersion "Java 17"

        mainArtifact(remapJar) {
            displayName = "[$project.minecraft_version] ThonkUtil $project.version"
            relations {
                requiredDependency 'fabric-api'
                optionalDependency 'trinkets'
            }
        }

        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }

    options {
        forgeGradleIntegration = false
        debug = ENV.GITHUB_RUN_NUMBER ? false : true
    }
}

task github(dependsOn: remapMavenJar) {
    onlyIf {
        ENV.GITHUB_TOKEN
        project.prerelease != "pre-alpha"
    }

    doLast {
        def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
        def repository = github.getRepository(ENV.GITHUB_REPOSITORY)

        def releaseBuilder = new GHReleaseBuilder(repository, version as String)
        releaseBuilder.name("[$project.minecraft_version] ThonkUtil $project.version")
        releaseBuilder.body(ENV.CHANGELOG ?: "No changelog provided")
        releaseBuilder.commitish(getBranch())
        releaseBuilder.prerelease(project.prerelease == "true" || project.prerelease == "alpha")

        def ghRelease = releaseBuilder.create()
        ghRelease.uploadAsset(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"), "application/java-archive");
    }
}

apply from: "gradle/module-versioning.gradle"